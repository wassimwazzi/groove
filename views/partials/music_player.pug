if platform == 'spotify'
  include music_players/_spotify_player.pug

<div id="js-music-player" class="music-player">
    <ul>
        <li class="cover">
            <img src="http://i1285.photobucket.com/albums/a583/TheGreatOzz1/Hosted-Images/Noisy-Freeks-Image_zps4kilrxml.png"/>
        </li>
        <li class="song-info">
            <div class="info-wrapper">
                <h1>The Noisy Freaks</h1>
                <h4>Premiere</h4>
                <h2>I Need You Back</h2>
            </div>

            <div class="button-items">
                <audio id="js-music" loop="false">
                </audio>
                <div id="js-music-slider"><div id="js-slider-elapsed"></div></div>
                <p id="js-music-timer" class="timer">0:00</p>
                <div class="controls">
                    <span id="js-prev-track" class="expend"><svg class="step-backward" viewBox="0 0 25 25" xml:space="preserve">
                        <g><polygon points="4.9,4.3 9,4.3 9,11.6 21.4,4.3 21.4,20.7 9,13.4 9,20.7 4.9,20.7"/></g>
                    </svg></span>

                    <svg id="js-play-music" class="play-music" viewBox="0 0 25 25" xml:space="preserve">
                        <defs><rect x="-49.5" y="-132.9" width="446.4" height="366.4"/></defs>
                            <g><circle fill="none" cx="12.5" cy="12.5" r="10.8"/>
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M8.7,6.9V18c0,0,0.2,1.4,1.8,0l8.1-4.8c0,0,1.2-1.1-1-2L9.8,6.5 C9.8,6.5,9.1,6,8.7,6.9z"/>
                            </g>
                    </svg>
                    

                    <svg id="js-pause-music" class="pause-music" viewBox="0 0 25 25" xml:space="preserve">
                        <g>
                            <rect x="6" y="4.6" width="3.8" height="15.7"/>
                            <rect x="14" y="4.6" width="3.9" height="15.7"/>
                        </g>
                    </svg>

                    <span id="js-next-track" class="expend"><svg class="step-foreward" viewBox="0 0 25 25" xml:space="preserve">
                        <g><polygon points="20.7,4.3 16.6,4.3 16.6,11.6 4.3,4.3 4.3,20.7 16.7,13.4 16.6,20.7 20.7,20.7"/></g>
                    </svg></span>
                </div>
            </div>
        </li>
    </ul>
</div>

script.
  const musicPlayer = document.getElementById("js-music-player");
  const music = document.getElementById("js-music");
  const playButton = document.getElementById("js-play-music");
  const pauseButton = document.getElementById("js-pause-music");
  const prevTrackButton = document.getElementById("js-prev-track");
  const nextTrackButton = document.getElementById("js-next-track");
  const playhead = document.getElementById("js-slider-elapsed");
  const timeline = document.getElementById("js-music-slider");
  const timer = document.getElementById("js-music-timer");
  let isPlayerReady = false;
  let duration = 0; // in seconds
  let trackName = "";
  let artistName = "";
  let albumName = "";
  let albumCover = "";
  let isPaused = true;

  toggleControlsClickable();

  // Events sent by the music player.
  // Platform specific implementation should listen for these events.
  const getTogglePlayEvent = () => new CustomEvent('toggleMusic', {});
  const getNextTrackEvent = () => new CustomEvent('nextTrack', {});
  const getPreviousTrackEvent = () => new CustomEvent('previousTrack', {});
  const getSetTrackEvent = (trackId) => new CustomEvent('setTrack', { detail: { trackId } });
  const getSeekToEvent = (time) => new CustomEvent('seekTo', { detail: { time } }); // time in ms
  const getSetVolumeEvent = (volume) => new CustomEvent('setVolume', { detail: { volume } }); // volume in [0, 1]
  const getSetShuffleEvent = (shuffle) => new CustomEvent('setShuffle', { detail: { shuffle } }); // shuffle is a boolean

  // Events sent to the music player.

  // This event should be triggered when the player is ready to receive events.  
  musicPlayer.addEventListener("setPlayerReady", (e) => {
    const isReady = e.detail;
    console.log("setting player ready to", isReady);
    isPlayerReady = isReady;
    toggleControlsClickable();
  }, false);

  // This event should be triggered when a new track is loaded.
  musicPlayer.addEventListener("setTrack", (e) => {
    trackName = e.detail.name;
    artistName = e.detail.artist;
    albumName = e.detail.album;
    albumCover = e.detail.cover;
    duration = e.detail.duration;
    isPaused = e.detail.paused;
    if (isPaused) {
      playButton.style.visibility = "visible";
      pauseButton.style.visibility = "hidden";
    } else {
      playButton.style.visibility = "hidden";
      pauseButton.style.visibility = "visible";
    }
    playhead.style.width = "0px";
    timer.innerHTML = "0:00";
  }, false);

  pauseButton.style.visibility = "hidden";
  let timelineWidth = timeline.offsetWidth - playhead.offsetWidth;
  music.addEventListener("timeupdate", timeUpdate, false);

  function toggleControlsClickable() {
    if (isPlayerReady) {
      playButton.style.pointerEvents = "auto";
      pauseButton.style.pointerEvents = "auto";
      prevTrackButton.style.pointerEvents = "auto";
      nextTrackButton.style.pointerEvents = "auto";
    } else {
      console.log("player not ready")
      playButton.style.pointerEvents = "none";
      pauseButton.style.pointerEvents = "none";
      prevTrackButton.style.pointerEvents = "none";
      nextTrackButton.style.pointerEvents = "none";
    }
  }

  function timeUpdate() {
    if (duration == 0) {
      return;
    }
    let playPercent = timelineWidth * (music.currentTime / duration);
    playhead.style.width = playPercent + "px";

    let secondsIn = Math.floor(((music.currentTime / duration) / 3.5) * 100);
    if (secondsIn <= 9) {
      timer.innerHTML = "0:0" + secondsIn;
    } else {
      timer.innerHTML = "0:" + secondsIn;
    }
  }

  playButton.onclick = function() {
    window.dispatchEvent(getTogglePlayEvent());
    playButton.style.visibility = "hidden";
    pauseButton.style.visibility = "visible";
  }

  pauseButton.onclick = function() {
    window.dispatchEvent(getTogglePlayEvent());
    playButton.style.visibility = "visible";
    pauseButton.style.visibility = "hidden";
  }

  prevTrackButton.onclick = function() {
    window.dispatchEvent(getPreviousTrackEvent());
  }

  nextTrackButton.onclick = function() {
    window.dispatchEvent(getNextTrackEvent());
  }
