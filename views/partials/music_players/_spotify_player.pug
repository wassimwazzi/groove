script(src="https://sdk.scdn.co/spotify-player.js")

iframe(style="border-radius:12px", src="https://open.spotify.com/embed/track/5DS9LiyEdw2zY8bM6kjjgM?utm_source=generator", width="100%", height="352", frameBorder="0", allowfullscreen="", allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture", loading="lazy")


div(id='music-player')
div(id='spotify-access-token' data-token=token)
<button id="togglePlay">Toggle Play</button>
.song-player
    img(src="../images/playlist-placeholder-spotify.jpg", class="now-playing-cover")
    .now-playing-side
        .now-playing-name Song Name
        .now-playing-artist Artist Name



script.
    window.onSpotifyWebPlaybackSDKReady = () => {
        const token = document.querySelector('#spotify-access-token').dataset.token;
        console.log(token)
        const player = new Spotify.Player({
            name: 'Web Playback SDK Quick Start Player',
            getOAuthToken: cb => { cb(token); },
            volume: 0.5
        });
        // Ready
        player.addListener('ready', ({ device_id }) => {
            console.log('Ready with Device ID', device_id);
        });

        // Not Ready
        player.addListener('not_ready', ({ device_id }) => {
            console.log('Device ID has gone offline', device_id);
        });

        player.addListener('initialization_error', ({ message }) => {
            console.error(message);
        });

        player.addListener('authentication_error', ({ message }) => {
            console.error(message);
        });

        player.addListener('account_error', ({ message }) => {
            console.error(message);
        });

        player.connect();

        document.getElementById('togglePlay').onclick = function() {
            player.togglePlay();
        };

        player.addListener('player_state_changed', ( state => {

            if (!state) {
                return;
            }
            console.log('state_changed', state)
            setTrack(state.track_window.current_track);
            setPaused(state.paused);


            //- player.getCurrentState().then( state => { 
            //-     (!state)? setActive(false) : setActive(true) 
            //- });
        }));



    }