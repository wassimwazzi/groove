if platform == 'spotify'
  include music_players/_spotify_player.pug

#js-music-player.music-player(style="display: none;")
  ul
    li.cover
      img
    li.player-song-info
      .info-wrapper
        #js-music-title.music-title
        #js-music-artist.music-artist
      .button-items
        audio#js-music(loop="false")
        .playback-slider#js-music-slider
          div#js-slider-elapsed(class=platform)
        p#js-music-timer.timer 0:00
        .controls
          span#js-prev-track.expend
            svg.step-backward(viewBox="0 0 25 25" xml:space="preserve")
              g
                polygon(points="4.9,4.3 9,4.3 9,11.6 21.4,4.3 21.4,20.7 9,13.4 9,20.7 4.9,20.7")
          svg#js-play-music.play-music(viewBox="0 0 25 25" xml:space="preserve")
            defs
              rect(x="-49.5" y="-132.9" width="446.4" height="366.4")
            g
              circle(fill="none" cx="12.5" cy="12.5" r="10.8")
              path(fill-rule="evenodd" clip-rule="evenodd" d="M8.7,6.9V18c0,0,0.2,1.4,1.8,0l8.1-4.8c0,0,1.2-1.1-1-2L9.8,6.5 C9.8,6.5,9.1,6,8.7,6.9z")
          svg#js-pause-music.pause-music(viewBox="0 0 25 25" xml:space="preserve" style="visibility: hidden;")
            g
              rect(x="6" y="4.6" width="3.8" height="15.7")
              rect(x="14" y="4.6" width="3.9" height="15.7")
          span#js-next-track.expend
            svg.step-foreward(viewBox="0 0 25 25" xml:space="preserve")
              g
                polygon(points="20.7,4.3 16.6,4.3 16.6,11.6 4.3,4.3 4.3,20.7 16.7,13.4 16.6,20.7 20.7,20.7")
      .volume
        img(src='../../images/volume-on.svg', class='volume-icon')
        #js-volume-slider.volume-slider
          div#js-volume-slider-head(class=platform)

script.
  const musicPlayer = document.getElementById("js-music-player");
  const music = document.getElementById("js-music");
  const playButton = document.getElementById("js-play-music");
  const pauseButton = document.getElementById("js-pause-music");
  const prevTrackButton = document.getElementById("js-prev-track");
  const nextTrackButton = document.getElementById("js-next-track");
  const sliderHead = document.getElementById("js-slider-elapsed");
  const posSlider = document.getElementById("js-music-slider");
  const timer = document.getElementById("js-music-timer");
  const sliderHeadDefaultSize = 4;
  const volumeSlider = document.getElementById("js-volume-slider");
  const volumeSliderHead = document.getElementById("js-volume-slider-head");
  let isPlayerReady = false;
  let duration = 0; // in seconds
  let elapsedTime = 0; // in seconds
  let intervalTimer;
  let trackName = "";
  let artistName = "";
  let albumName = "";
  let albumCover = ""; // src of the album cover image
  let isPaused = true;
  let volume = 0.5;
  let posDragging = false;
  let volDragging = false;

  toggleControlsClickable();

  // Events sent by the music player.
  // Platform specific implementation should listen for these events.
  const getTogglePlayEvent = () => new CustomEvent('toggleMusic', {});
  const getNextTrackEvent = () => new CustomEvent('nextTrack', {});
  const getPreviousTrackEvent = () => new CustomEvent('previousTrack', {});
  const getSetTrackEvent = (trackId) => new CustomEvent('setTrack', { detail: { trackId } });
  const getSeekToEvent = (seconds) => new CustomEvent('seek', { detail: { seconds } }); // time in s
  const getSetVolumeEvent = (volume) => new CustomEvent('setVolume', { detail: { volume } }); // volume in [0, 1]
  const getSetShuffleEvent = (shuffle) => new CustomEvent('setShuffle', { detail: { shuffle } }); // shuffle is a boolean

  // Events sent to the music player.

  // This event should be triggered when the player is ready to receive events.  
  musicPlayer.addEventListener("setPlayerReady", (e) => {
    const isReady = e.detail;
    isPlayerReady = isReady;
    console.log("Player is " + (isReady ? "ready" : "not ready"));
    toggleControlsClickable();
  }, false);

  // This event should be triggered when a new track is loaded.
  musicPlayer.addEventListener("setTrack", (e) => {
    trackName = e.detail.name;
    artistName = e.detail.artist;
    albumName = e.detail.album;
    albumCover = e.detail.cover;
    duration = e.detail.duration;
    elapsedTime = e.detail.elapsedTime;
    isPaused = e.detail.paused;
    volume = e.detail.volume;
    intervalTimer = clearInterval(intervalTimer); // always clear first so we don't have multiple timers running
    updateSlider(false);
    volumeSliderHead.style.bottom = volume * volumeSlider.offsetHeight + "px";
    if (isPaused) {
      playButton.style.visibility = "visible";
      pauseButton.style.visibility = "hidden";
    } else {
      playButton.style.visibility = "hidden";
      pauseButton.style.visibility = "visible";
      intervalTimer = setInterval(updateSlider, 1000);
    }
    timer.innerHTML = `${formatTime(elapsedTime)} / ${formatTime(duration)}`;
    setMusicPlayerDisplay();
  }, false);

  function setMusicPlayerDisplay() {
    const musicTitle = document.getElementById("js-music-title");
    const musicArtist = document.getElementById("js-music-artist");
    const musicCover = document.querySelector(".cover img");
    musicTitle.innerHTML = "<h2>" + trackName + "</h2>";
    musicArtist.innerHTML = "<h4>" + artistName + "</h4>";
    musicCover.src = albumCover;
    musicPlayer.style.display = '';
  }
  function toggleControlsClickable() {
    if (isPlayerReady) {
      playButton.style.pointerEvents = "auto";
      pauseButton.style.pointerEvents = "auto";
      prevTrackButton.style.pointerEvents = "auto";
      nextTrackButton.style.pointerEvents = "auto";
    } else {
      playButton.style.pointerEvents = "none";
      pauseButton.style.pointerEvents = "none";
      prevTrackButton.style.pointerEvents = "none";
      nextTrackButton.style.pointerEvents = "none";
    }
  }

  function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = Math.floor(seconds % 60);

    let timeString = '';

    if (hours > 0) {
      timeString += hours.toString().padStart(2, '0') + ':';
    }

    timeString += minutes.toString().padStart(2, '0') + ':';
    timeString += remainingSeconds.toString().padStart(2, '0');

    return timeString;
  }

  playButton.onclick = function() {
    window.dispatchEvent(getTogglePlayEvent());
    playButton.style.visibility = "hidden";
    pauseButton.style.visibility = "visible";
    if (!intervalTimer) {
      intervalTimer = clearInterval(intervalTimer);
    }
  }

  pauseButton.onclick = function() {
    window.dispatchEvent(getTogglePlayEvent());
    intervalTimer = clearInterval(intervalTimer)
    playButton.style.visibility = "visible";
    pauseButton.style.visibility = "hidden";
  }

  prevTrackButton.onclick = function() {
    window.dispatchEvent(getPreviousTrackEvent());
  }

  nextTrackButton.onclick = function() {
    window.dispatchEvent(getNextTrackEvent());
  }

  // slider control
  function setTime() {
    timer.innerHTML = `${formatTime(elapsedTime)} / ${formatTime(duration)}`;
  }

  function setSliderPosition() {
    let sliderWidth = posSlider.offsetWidth - sliderHeadDefaultSize;
    let playPercent = sliderWidth * (elapsedTime / duration);
    sliderHead.style.width = playPercent + "px";
  }

  function setVolumeSliderPosition(mouseY) {
    let relativePosition = volumeSlider.getBoundingClientRect().bottom - mouseY;
    relativePosition = Math.min(volumeSlider.offsetHeight, Math.max(0, relativePosition)) // ensure position is within size
    volumeSliderHead.style.bottom = relativePosition + "px";
  }

  function updateSlider(inc=true) {
    if (inc) {
      elapsedTime += 1;
    }
    setTime();
    setSliderPosition();
  }
   // Function to calculate the percentage
  function calculatePercentage(position, size) {
    position = Math.min(size, Math.max(0, position)) // ensure position is within size
    const percentage = (position / size) * 100;
    return Math.round(percentage);
  }

  function sliderTimeFromMousePosition(mouseX) {
    const sliderLeft = posSlider.getBoundingClientRect().left;
    const relativePosition = mouseX - sliderLeft;
    const percentage = calculatePercentage(relativePosition, posSlider.offsetWidth);
    return percentage * duration / 100;
  }

  // Event listeners for slider head movement
  posSlider.addEventListener('mousedown', (e) => {
    posDragging = true;
    elapsedTime = sliderTimeFromMousePosition(e.clientX);
    updateSlider(false);
  });

  volumeSlider.addEventListener('mousedown', (e) => {
    volDragging = true;
    setVolumeSliderPosition(e.clientY);
  });

  document.addEventListener('mouseup', (e) => {
    if (posDragging) {
      posDragging = false;
      elapsedTime = sliderTimeFromMousePosition(e.clientX);
      updateSlider(false);
      window.dispatchEvent(getSeekToEvent(elapsedTime));
    } else if (volDragging) {
      volDragging = false;
      setVolumeSliderPosition(e.clientY);
      const percentage = calculatePercentage(e.clientY, volumeSlider.offsetHeight);
      const volume = percentage / 100;
      window.dispatchEvent(getSetVolumeEvent(volume));
    }
  });

  document.addEventListener('mousemove', (e) => {
    if (posDragging) {
      elapsedTime = sliderTimeFromMousePosition(e.clientX);
      updateSlider(false);
    } else if (volDragging) {
      setVolumeSliderPosition(e.clientY);
      const percentage = calculatePercentage(e.clientY, volumeSlider.offsetHeight);
      const volume = percentage / 100;
      window.dispatchEvent(getSetVolumeEvent(volume));
    }
  });

